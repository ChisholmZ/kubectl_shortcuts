#!/usr/bin/env python

import argparse, sys, json, os
from jenkins_config import *
from lib import *

## unbuffer stdout to fix time
sys.stdout = Unbuffered(sys.stdout)

## parse arguments
parser = argparse.ArgumentParser()
parser.add_argument('--context', '-C', help='Context', type=str, default='Dev')
parser.add_argument('--job', '-J', help='Create Jenkins Job', type=str, default=None)
parser.add_argument('--update_job', '-u', help='Update Jenkins Job', type=str, default=None)
parser.add_argument('--build_job', '-B', help='Build Jenkins Job', type=str, default=None)
parser.add_argument('--get_jobs', '-G', help='Get Jenkins Jobs', action='store_true')
parser.add_argument('--update', '-U', help='Update Jenkins Jobs', action='store_true')
parser.add_argument('--deploy', '-D', help='Run Jenkins Job', action='store_true')
parser.add_argument('--release', '-R', help='Create Release yaml', type=str, default=None)
parser.add_argument('--test', '-T', help='Test', action='store_true')
parser.add_argument('--github', '-H', help='Get github repos', action='store_true')
parser.add_argument('--run', '-r', help='Run the deployments', action='store_true')
parser.add_argument('--save', '-V', help='Save Config File', action='store_true')
parser.add_argument('--seconds', '-S', help='Seconds between jobs', type=int, default=120)
parser.add_argument('--yaml', '-Y', help='yaml file to read', type=str, default="%s/jenkins.yaml" % sys.path[0])
args = parser.parse_args()

if not re.match(r'Release_', args.release): args.release = 'Release_%s' % args.release

## set Jenkins from config
jobs = Jobs(jenkins_config, args.context)

if args.job:
    jobs.create_job(args.job)
elif args.get_jobs:
    print(jobs.get_jobs())
elif args.update_job:
    jobs.update_job(args.update_job)
elif args.build_job:
    jobs.build_job(args.build_job)
elif args.update:
    jobs.update_jobs()
elif args.save:
    jobs.save_config()
elif args.release:
    create_yaml(args, github_token)
elif args.deploy:
    jobs.select_job()
elif args.github:
    for repo in get_repos(github_token):
        print(repo.name)
elif args.run:
    print(run(args, jobs))
