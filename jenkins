#!/usr/bin/env python

import argparse, sys, json
from jenkins_config import *
from lib import *

## unbuffer stdout to fix time
sys.stdout = Unbuffered(sys.stdout)

## parse arguments
parser = argparse.ArgumentParser()
parser.add_argument('--context', '-C', help='Context', type=str, default='Dev')
parser.add_argument('--job', '-J', help='Create Jenkins Job', type=str, default=None)
parser.add_argument('--get-jobs', '-G', help='Get Jenkins Jobs', type=str, default=None)
parser.add_argument('--deploy', '-D', help='Run Jenkins Job', action='store_true')
parser.add_argument('--release', '-R', help='Create Release yaml', type=str, default=None)
parser.add_argument('--test', '-T', help='Test', action='store_true')
parser.add_argument('--github', '-H', help='Test', action='store_true')
parser.add_argument('--seconds', '-S', help='Seconds between jobs', type=int, default=120)
parser.add_argument('--yaml', '-Y', help='yaml file to read', type=str, default="%s/jenkins.yaml" % sys.path[0])
args = parser.parse_args()

## set Jenkins url from config
jenkins_url="%s:%s@%s" % (jenkins_user, jenkins_token, jenkins_domain)
jobs = Jobs(jenkins_user, jenkins_token, jenkins_domain)

if args.job:
    jobs.create_job(args, jenkins_url)
elif args.release:
    print jobs.get_jobs()
elif args.release:
    create_yaml(args, github_token)
elif args.deploy:
    choose_jobs(get_jobs(github_token))
elif args.github:
    for repo in get_repos(github_token):
        print(repo.name)
else:
    run(args, jenkins_url)
