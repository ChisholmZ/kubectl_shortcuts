#!/bin/sh
#build pod on local kube
#~zach

MOD=$(git ls-files -m)

source ks_config.sh
source telhub.sh

git config core.fileMode false

funcHandleReturnCode() {

  returnCode=$1
  msg=$2

  if (( returnCode != 0 ));then
      echo ${returnCode}
      echo "FAILED!!! ${msg}"
      exit ${returnCode}
  else
      echo "Success: ${msg}"
  fi
}

LOCAL_PATH=$(pwd)
MAIN_DIR=$LOCAL_PATH
PULL_POLICY='IfNotPresent'

while [ $# -ne 0 ]
do
    arg="${1:2}"
    case "${arg}" in
       skip-build)
           NO_BUILD=true;
           ;;
       skip-java)
           NO_JAVA=true;
           ;;
       skip-dos)
           DOS=false;
           ;;
       skip-composer)
           NO_COMPOSER=true;
           ;;
       skip-rmi)
           NO_RMI=true;
           ;;
       clean-java)
           CLEAN_JAVA=true;
           ;;
       service-name=*)
           SERVICE_NAME="${arg:13}";
           ;;
       dir=*)
           DIR="${arg:4}";
           ;;
       local-path=*)
           LOCAL_PATH="${arg:11}";
           ;;
       pull-policy=*)
           PULL_POLICY="${arg:12}";
           ;;
    esac
    shift
done

if [ $DOS == true ]; then
    dos2unix Dockerfile
    dos2unix *.sh
    dos2unix *.json
    dos2unix *.conf
    dos2unix tmpfiles/*
    dos2unix vol1/*
fi

if [ -z "$DIR" ]; then
    DIR=$(basename "$MAIN_DIR")
fi

DIR=$(echo $DIR | sed "s/telematics-hub-//g")

if [ -z "$SERVICE_NAME" ]; then
    SERVICE_NAME=${REPO_SERVICE[$DIR]}
fi

if [ -f pom.xml ] && [ ! -z "$CLEAN_JAVA" ]; then
    mvn clean
fi

if [ -f pom.xml ] && [ -z "$NO_JAVA" ] && [ -z "$NO_BUILD" ]; then
    echo 'java found'
    if [ $DOS == true ]; then
        find src -type f -print0 | xargs -0 dos2unix
    fi
    mvn -B -f pom.xml clean install -DskipTests=true
    funcHandleReturnCode $? "build maven"
fi

if [ -f composer.json ] && [ -z "$NO_COMPOSER" ] && [ -z "$NO_BUILD" ]; then
    echo 'composer found'
    composer update -o
    funcHandleReturnCode $? "build composer"
fi

if [ -d php ]; then
    rm -rf php
fi

sed -i 's/RUN cd \$HOME \&\& composer update \&\& composer dumpautoload/RUN cd \$HOME/g' Dockerfile
sed -i 's/RUN composer update \&\& composer dumpautoload \-o//g' Dockerfile

# Remove previous Docker images just in case children dependencies exist on running container
RMI=$(docker images -f dangling=true -q --no-trunc)
if [ ! -z "$RMI" ] && [ -z "$NO_BUILD" ] && [ -z "$NO_RMI" ]; then
    echo "Remove local Docker image"
    docker rmi -f $RMI
fi

GIT_COMMIT=$(git log -1 --format=%h)
# TIMESTAMP=$(date +%s)
# DOCKER_TAG=${GIT_COMMIT}-${TIMESTAMP}
DOCKER_TAG=${GIT_COMMIT}
HELM_DEPLOYMENT_NAME=${NAMESPACE}-${SERVICE_NAME}

echo "DOCKER_TAG $DOCKER_TAG";
echo "NAMESPACE $NAMESPACE";
echo "SERVICE_NAME $SERVICE_NAME";
echo "NAMESPACE $NAMESPACE";
echo "HELM_DEPLOYMENT_NAME $HELM_DEPLOYMENT_NAME";

if [ -z "$NO_BUILD" ]; then
    $DOCKER build -t ${DIR}:latest .
    funcHandleReturnCode $? "Build Docker image"

    $DOCKER tag ${DIR}:latest $SERVICE_NAME:latest
    $DOCKER tag ${DIR}:latest $DIR:$DOCKER_TAG
    $DOCKER tag ${DIR}:latest $SERVICE_NAME:$DOCKER_TAG
    funcHandleReturnCode $? "Tag Docker image"
fi

kubectl config use-context $CONTEXT

RELEASE_NAME_LISTING=$(helm ls ${HELM_DEPLOYMENT_NAME} --namespace ${NAMESPACE} --deployed)

## Check if Helm is installed otherwise upgrade
if [[ $RELEASE_NAME_LISTING == *"${HELM_DEPLOYMENT_NAME}"*"${NAMESPACE}"* ]]
then
	helm upgrade --namespace ${NAMESPACE} ${HELM_DEPLOYMENT_NAME} "${CHARTS}/${SERVICE_NAME}" \
    --set image.repository=${SERVICE_NAME},image.tag=${DOCKER_TAG},image.pullPolicy=${PULL_POLICY},localPath=${LOCAL_PATH} \
    --recreate-pods
else
	helm install --namespace ${NAMESPACE} "${CHARTS}/${SERVICE_NAME}" \
    --name=${HELM_DEPLOYMENT_NAME} \
    --set image.repository=${SERVICE_NAME},image.tag=${DOCKER_TAG},image.pullPolicy=${PULL_POLICY},localPath=${LOCAL_PATH}
fi

funcHandleReturnCode $? "Helm"

branch=$(git rev-parse --abbrev-ref HEAD)

for file in $(git ls-files -m)
do
    if [[ $MOD != *"$file"* ]] && [ -f $file ]; then
       git checkout $branch $file
    fi
done
